resource "digitalocean_droplet" "ansible-control-node" {
    image = "ubuntu-20-04-x64"
    name = "ansible-control-node"
    region = "sgp1"
    size = "s-2vcpu-2gb"
    tags = [data.digitalocean_tag.k8s-test.id]
    private_networking = true
    ssh_keys = [
      data.digitalocean_ssh_key.machiron.id
    ]
connection {
    host = self.ipv4_address
    user = "root"
    type = "ssh"
    private_key = file(var.pvt_key)
    timeout = "2m"
  }
provisioner "remote-exec" {
    inline = [
      "export PATH=$PATH:/usr/bin",
      # install ansible
      "sudo apt-get update",
      "sudo apt-add-repository -y ppa:ansible/ansible",
      "sudo apt-get install ansible -y",
      "sudo apt-get install python3 -y"
    ]
  }
  provisioner "file" {
    source = "k8s.yml"
    destination = "/root/"
 }
}

resource "digitalocean_droplet" "master1" {
    image = "ubuntu-20-04-x64"
    name = "master1"
    region = "sgp1"
    size = "s-2vcpu-2gb" 
    tags = [data.digitalocean_tag.k8s-test.id]
    private_networking = true
    ssh_keys = [
      data.digitalocean_ssh_key.machiron.id
    ]
}
resource "digitalocean_droplet" "master2" {
    image = "ubuntu-20-04-x64"
    name = "master2"
    region = "sgp1"
    size = "s-2vcpu-2gb" 
    tags = [data.digitalocean_tag.k8s-test.id]
    private_networking = true
    ssh_keys = [
      data.digitalocean_ssh_key.machiron.id
    ]
}
resource "digitalocean_droplet" "master3" {
    image = "ubuntu-20-04-x64"
    name = "master3"
    region = "sgp1"
    size = "s-2vcpu-2gb" 
    tags = [data.digitalocean_tag.k8s-test.id]
    private_networking = true
    ssh_keys = [
      data.digitalocean_ssh_key.machiron.id
    ]
}
resource "digitalocean_droplet" "worker" {
    image = "ubuntu-20-04-x64"
    name = "worker"
    region = "sgp1"
    size = "s-2vcpu-2gb"
    tags = [data.digitalocean_tag.k8s-test.id]
    private_networking = true
    ssh_keys = [
      data.digitalocean_ssh_key.machiron.id
    ]
}
resource "digitalocean_droplet" "ha" {
    image = "ubuntu-20-04-x64"
    name = "ha"
    region = "sgp1"
    size = "s-2vcpu-2gb"
    tags = [data.digitalocean_tag.k8s-test.id]
    private_networking = true
    ssh_keys = [
      data.digitalocean_ssh_key.machiron.id
    ]
}
#resource "local_file" "hosts_yml" {
  #content = templatefile("${path.module}/templates/hosts.tpl",
   # {
    #  masters = digitalocean_droplet.master.*.ipv4_address
     # workers = digitalocean_droplet.worker.*.ipv4_address
     # ha     = digitalocean_droplet.ha.ipv4_address
   # }
 # )
 # filename = "hosts.yml"
#}
resource "null_resource" "hosts" {
  triggers = {
    template_rendered = "${data.template_file.hosts.rendered}"
  }
  provisioner "local-exec" {
    command = "echo '${data.template_file.hosts.rendered}' > hosts.yml"
  }
}
resource "local_file" "tf_ansible_vars_file_new" {
  content = <<-DOC
    # Ansible vars_file containing variable values from Terraform.
    # Generated by Terraform mgmt configuration.
       ip_master1: ${join("\n", digitalocean_droplet.master1.*.ipv4_address )}
       ip_master2: ${join("\n", digitalocean_droplet.master2.*.ipv4_address )}
       ip_master3: ${join("\n", digitalocean_droplet.master3.*.ipv4_address )}
       ip_workers: ${join("\n", digitalocean_droplet.worker.*.ipv4_address )}
       ip_ha: ${join("\n", digitalocean_droplet.ha.*.ipv4_address )}
    DOC
  filename = "./tf_ansible_vars_file.yml"
}

resource "null_resource" "ansible-control-node" {
  connection {
    host = "${digitalocean_droplet.ansible-control-node.ipv4_address}"
    user = "root"
    type = "ssh"
    private_key = file(var.pvt_key)
    timeout = "2m"
  } 

  provisioner "file" {
    source = "hosts.yml"
    destination = "/etc/ansible/"
 }
  provisioner "local-exec" {
    command = "ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -u root --private-key ${var.pvt_key} -i hosts.yml k8s.yml"
          
  }
}

